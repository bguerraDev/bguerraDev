name: Update GitHub Profile README

on:
  schedule:
    - cron: "0 */6 * * *"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-readme:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Fetch data and update README (pure Node, no sed/jq)
        run: |
          node - <<'NODE'
          const fs = require('fs');

          async function getJson(url) {
            const res = await fetch(url, {
              headers: { 'Accept': 'application/vnd.github+json' }
            });
            if (!res.ok) throw new Error(`Fetch ${url} -> ${res.status}`);
            return res.json();
          }

          function replaceBetween(src, tag, content) {
            const start = `<!-- ${tag}:START -->`;
            const end   = `<!-- ${tag}:END -->`;
            const re = new RegExp(`${start}[\\s\\S]*?${end}`, 'm');
            if (!re.test(src)) return src;
            return src.replace(re, `${start}\n${content}\n${end}`);
          }

          (async () => {
            const user = 'bguerraDev';

            // Ãšltimo repo (por actualizaciÃ³n)
            const latestRepos = await getJson(`https://api.github.com/users/${user}/repos?sort=updated&per_page=1`);
            const latest = latestRepos[0];
            const latestLine = `ðŸš€ **${latest.full_name}** â€” ${latest.description ?? 'No description'}`;

            // Lista de 5 repos actualizados
            const repos = await getJson(`https://api.github.com/users/${user}/repos?sort=updated&per_page=5`);
            const listLines = repos.map(r =>
              `- [${r.name}](${r.html_url}) â€” ${r.description ?? 'No description'}`
            ).join('\n');

            // Actualizar README
            const path = 'README.md';
            let md = fs.readFileSync(path, 'utf8');
            md = replaceBetween(md, 'LATEST-PROJECT', latestLine);

            if (md.includes('<!-- LATEST-REPOS:START -->')) {
              md = replaceBetween(md, 'LATEST-REPOS', listLines);
            } else if (md.includes('<!--START_SECTION:activity-->')) {
              const start = '<!--START_SECTION:activity-->';
              const end   = '<!--END_SECTION:activity-->';
              const re = new RegExp(`${start}[\\s\\S]*?${end}`, 'm');
              md = md.replace(re, `${start}\n${listLines}\n${end}`);
            }

            fs.writeFileSync(path, md);
          })().catch(err => {
            console.error(err);
            process.exit(1);
          });
          NODE

      - name: Commit and push changes
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add README.md
          git commit -m "chore: update latest project and repos [skip ci]" || echo "No changes"
          git push